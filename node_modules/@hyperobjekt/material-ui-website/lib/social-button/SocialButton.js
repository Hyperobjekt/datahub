"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@material-ui/core");

var _Facebook = _interopRequireDefault(require("@material-ui/icons/Facebook"));

var _Twitter = _interopRequireDefault(require("@material-ui/icons/Twitter"));

var _LinkedIn = _interopRequireDefault(require("@material-ui/icons/LinkedIn"));

var _Instagram = _interopRequireDefault(require("@material-ui/icons/Instagram"));

var _GitHub = _interopRequireDefault(require("@material-ui/icons/GitHub"));

var _YouTube = _interopRequireDefault(require("@material-ui/icons/YouTube"));

var _Link = _interopRequireDefault(require("@material-ui/icons/Link"));

var _Email = _interopRequireDefault(require("@material-ui/icons/Email"));

var _Share = _interopRequireDefault(require("@material-ui/icons/Share"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var getIcon = function getIcon(name) {
  switch (name) {
    case "facebook":
      return _Facebook["default"];

    case "twitter":
      return _Twitter["default"];

    case "linkedin":
      return _LinkedIn["default"];

    case "instagram":
      return _Instagram["default"];

    case "github":
      return _GitHub["default"];

    case "youtube":
      return _YouTube["default"];

    case "link":
      return _Link["default"];

    case "email":
      return _Email["default"];

    default:
      return _Share["default"];
  }
};
/**
 * Social button allows you to create links and buttons for social actions.
 *
 * - valid icon strings: `facebook`, `twitter`, `linkedin`, `instagram`, `github`, `youtube`, `link`, `email`
 * - provide an `href` prop when linking to a social account
 * - use an `onClick` handler when performing an action (e.g. opening a dialog, triggering something with javascript)
 */


var SocialButton = function SocialButton(_ref) {
  var icon = _ref.icon,
      href = _ref.href,
      props = _objectWithoutProperties(_ref, ["icon", "href"]);

  var Icon = typeof icon === "string" ? getIcon(icon) : icon;
  var overrideProps = href ? {
    component: _core.Link,
    target: "_blank",
    rel: "noopener noreferrer",
    href: href
  } : {};
  return /*#__PURE__*/_react["default"].createElement(_core.IconButton, _extends({}, overrideProps, props), /*#__PURE__*/_react["default"].createElement(Icon, null));
};

SocialButton.defaultProps = {
  icon: "share"
};
SocialButton.propTypes = {
  /** Either a string representing the social icon to use, or an icon component */
  icon: _propTypes["default"].any,

  /** A link to the social media account */
  href: _propTypes["default"].string
};
SocialButton.__docgenInfo = {
  "description": "Social button allows you to create links and buttons for social actions.\n\n- valid icon strings: `facebook`, `twitter`, `linkedin`, `instagram`, `github`, `youtube`, `link`, `email`\n- provide an `href` prop when linking to a social account\n- use an `onClick` handler when performing an action (e.g. opening a dialog, triggering something with javascript)",
  "methods": [],
  "displayName": "SocialButton",
  "props": {
    "icon": {
      "defaultValue": {
        "value": "\"share\"",
        "computed": false
      },
      "type": {
        "name": "any"
      },
      "required": false,
      "description": "Either a string representing the social icon to use, or an icon component"
    },
    "href": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "A link to the social media account"
    }
  }
};
var _default = SocialButton;
exports["default"] = _default;