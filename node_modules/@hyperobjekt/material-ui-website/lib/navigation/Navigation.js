"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Navigation = exports.styles = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var _core = require("@material-ui/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DefaultArrowIcon = function DefaultArrowIcon(props) {
  return /*#__PURE__*/_react["default"].createElement(_core.SvgIcon, props, /*#__PURE__*/_react["default"].createElement("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }));
};

var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      flex: "0 1",
      display: "flex",
      alignItems: "stretch"
    },

    /* Styles applied to the list wrapper */
    list: {},

    /* Styles applied to each list item */
    listItem: {
      position: "relative",
      flexDirection: "column",
      alignItems: "flex-start",
      justifyContent: "center",
      padding: 0
    },
    listItemActive: {
      "& > a": {
        fontWeight: "bold"
      }
    },

    /* Styles applies to each link */
    link: {
      display: "flex",
      alignItems: "center",
      padding: theme.spacing(1),
      whiteSpace: "nowrap"
    },
    linkActive: {
      fontWeight: "bold"
    }
  };
};
/**
 * Returns true if the provided menu item matches the active param
 * or the return value of the active function
 * @param {*} menuItem
 * @param {string|function} active
 * @returns {boolean}
 */


exports.styles = styles;

var isActive = function isActive(menuItem, active) {
  if (typeof active === "string") return menuItem.name === active || menuItem.link === active;
  if (typeof active === "function") return active(menuItem);
  return false;
};
/**
 * The navigation component is used to create a nested list of links, most often used for site navigation.
 */


var Navigation = function Navigation(_ref) {
  var classes = _ref.classes,
      className = _ref.className,
      Component = _ref.component,
      depth = _ref.depth,
      maxDepth = _ref.maxDepth,
      active = _ref.active,
      links = _ref.links,
      LinkComponent = _ref.LinkComponent,
      LinkProps = _ref.LinkProps,
      isGatsbyLink = _ref.isGatsbyLink,
      ArrowIcon = _ref.ArrowIcon,
      props = _objectWithoutProperties(_ref, ["classes", "className", "component", "depth", "maxDepth", "active", "links", "LinkComponent", "LinkProps", "isGatsbyLink", "ArrowIcon"]);

  var showSubmenu = depth < maxDepth;
  return /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: (0, _clsx2["default"])("HypNavigation-root", classes.root, "HypNavigation-depth".concat(depth), className)
  }, props), /*#__PURE__*/_react["default"].createElement(_core.List, {
    className: (0, _clsx2["default"])("HypNavigation-list", classes.list)
  }, links.map(function (menuItem, index) {
    var _menuItem$subMenu, _menuItem$subMenu2;

    return /*#__PURE__*/_react["default"].createElement(_core.ListItem, {
      className: (0, _clsx2["default"])("HypNavigation-listItem", classes.listItem, _defineProperty({}, classes.listItemActive, isActive(menuItem, active))),
      key: "link" + index
    }, /*#__PURE__*/_react["default"].createElement(LinkComponent, _extends({
      className: (0, _clsx2["default"])("HypNavigation-link", classes.link),
      href: isGatsbyLink ? undefined : menuItem.link,
      to: isGatsbyLink ? menuItem.link : undefined,
      activeClassName: isGatsbyLink ? classes.linkActive : undefined
    }, LinkProps), menuItem.name, ((_menuItem$subMenu = menuItem.subMenu) === null || _menuItem$subMenu === void 0 ? void 0 : _menuItem$subMenu.length) > 0 && showSubmenu && /*#__PURE__*/_react["default"].createElement(ArrowIcon, null)), ((_menuItem$subMenu2 = menuItem.subMenu) === null || _menuItem$subMenu2 === void 0 ? void 0 : _menuItem$subMenu2.length) > 0 && showSubmenu && /*#__PURE__*/_react["default"].createElement(Navigation, {
      classes: classes,
      component: "div",
      depth: depth + 1,
      maxDepth: maxDepth,
      links: menuItem.subMenu,
      active: active
    }));
  })));
};

exports.Navigation = Navigation;
Navigation.defaultProps = {
  classes: {},
  LinkComponent: _core.Link,
  ArrowIcon: DefaultArrowIcon,
  links: [],
  component: "nav",
  depth: 0,
  maxDepth: 999
};
Navigation.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes["default"].object.isRequired,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes["default"].elementType,

  /** Array of link objects ({ name, link, submenu }) */
  links: _propTypes["default"].array,

  /** Either a string containing the active page, or a function that accepts a menu item and returns a boolean based on if the menu item is active or not */
  active: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),

  /** The maximum depth to nest links to */
  maxDepth: _propTypes["default"].number,

  /** The current depth of navigation */
  depth: _propTypes["default"].number,

  /** Arrow component to indicate there are sublinks */
  ArrowIcon: _propTypes["default"].any,

  /** Component to use for links */
  LinkComponent: _propTypes["default"].any,

  /** Props object to pass to link component */
  LinkProps: _propTypes["default"].object,

  /** boolean that determines if the [Gatsby Link API](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-link/) should be used instead of standard `<a>` tag props  */
  isGatsbyLink: _propTypes["default"].bool
};
Navigation.__docgenInfo = {
  "description": "The navigation component is used to create a nested list of links, most often used for site navigation.",
  "methods": [],
  "displayName": "Navigation",
  "props": {
    "classes": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Override or extend the styles applied to the component."
    },
    "LinkComponent": {
      "defaultValue": {
        "value": "Link",
        "computed": true
      },
      "type": {
        "name": "any"
      },
      "required": false,
      "description": "Component to use for links"
    },
    "ArrowIcon": {
      "defaultValue": {
        "value": "(props) => {\n  return (\n    <SvgIcon {...props}>\n      <path d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\" />\n    </SvgIcon>\n  );\n}",
        "computed": false
      },
      "type": {
        "name": "any"
      },
      "required": false,
      "description": "Arrow component to indicate there are sublinks"
    },
    "links": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "array"
      },
      "required": false,
      "description": "Array of link objects ({ name, link, submenu })"
    },
    "component": {
      "defaultValue": {
        "value": "\"nav\"",
        "computed": false
      },
      "type": {
        "name": "elementType"
      },
      "required": false,
      "description": "The component used for the root node.\nEither a string to use a HTML element or a component."
    },
    "depth": {
      "defaultValue": {
        "value": "0",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "The current depth of navigation"
    },
    "maxDepth": {
      "defaultValue": {
        "value": "999",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "The maximum depth to nest links to"
    },
    "active": {
      "type": {
        "name": "union",
        "value": [{
          "name": "string"
        }, {
          "name": "func"
        }]
      },
      "required": false,
      "description": "Either a string containing the active page, or a function that accepts a menu item and returns a boolean based on if the menu item is active or not"
    },
    "LinkProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Props object to pass to link component"
    },
    "isGatsbyLink": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "boolean that determines if the [Gatsby Link API](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-link/) should be used instead of standard `<a>` tag props"
    }
  }
};
var exportComponent = (0, _core.withStyles)(styles, {
  name: "HypNavigation"
})(Navigation); // copy static props for storybook

if (process.env.NODE_ENV !== "production") {
  exportComponent.displayName = Navigation.displayName;
  exportComponent.propTypes = Navigation.propTypes;
  exportComponent.defaultProps = Navigation.defaultProps;
}

var _default = exportComponent;
exports["default"] = _default;