"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Container = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _core = require("@material-ui/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var styles = function styles(theme) {
  var _root;

  return {
    root: (_root = {
      marginLeft: "auto",
      marginRight: "auto",
      width: "100%",
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2)
    }, _defineProperty(_root, theme.breakpoints.up("sm"), {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }), _defineProperty(_root, theme.breakpoints.up("md"), {
      paddingLeft: theme.spacing(6),
      paddingRight: theme.spacing(6)
    }), _defineProperty(_root, theme.breakpoints.up("lg"), {
      maxWidth: 1280
    }), _defineProperty(_root, theme.breakpoints.up("xl"), {
      maxWidth: 1440
    }), _root)
  };
};
/**
 * The container component is a responsive wrapper for content on the site.  Using the container component ensures:
 *
 * - content does not exceed the maxWidth for content for the page
 * - appropriate padding is applied to content to prevent it from going too close to screen edges
 *
 * The default container provides the following padding / maxWidths:
 *
 * - `xs` breakpoint (< 600px):
 *   - fluid width, 2 spacing units (16px) of padding on left / right of container
 * - `sm` breakpoint (600px - 960px):
 *   - fluid width, 3 spacing units (24px) of padding on left / right of container
 * - `md` breakpoint (960px - 1280px):
 *   - fluid width, 6 spacing units (48px) of padding on left / right of container
 * - `lg` breakpoint (1280px - 1920px):
 *   - fixed container width of 1280px
 *   - fluid width, 6 spacing units (48px) of padding on left / right of container
 * - `xl` breakpoint (> 1920px):
 *   - fixed container width of 1440px
 *   - fluid width, 6 spacing units (48px) of padding on left / right of container
 *
 * The container component is based off of the [Material UI box](https://material-ui.com/components/box/) component, so all [box props](https://material-ui.com/components/box/#api) and [style props](https://material-ui.com/system/basics/#all-inclusive) are available.
 */


var Container = function Container(_ref) {
  var classes = _ref.classes,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, ["classes", "className"]);

  return /*#__PURE__*/_react["default"].createElement(_core.Box, _extends({
    className: (0, _clsx["default"])(classes.root, className),
    display: "flex",
    flexDirection: "column"
  }, props));
};

exports.Container = Container;
Container.defaultProps = {
  classes: {}
};
Container.propTypes = {
  /**
   * Object with class name overrides (valid keys: `root`)
   */
  classes: _propTypes["default"].object
};
Container.__docgenInfo = {
  "description": "The container component is a responsive wrapper for content on the site.  Using the container component ensures:\n\n- content does not exceed the maxWidth for content for the page\n- appropriate padding is applied to content to prevent it from going too close to screen edges\n\nThe default container provides the following padding / maxWidths:\n\n- `xs` breakpoint (< 600px):\n  - fluid width, 2 spacing units (16px) of padding on left / right of container\n- `sm` breakpoint (600px - 960px):\n  - fluid width, 3 spacing units (24px) of padding on left / right of container\n- `md` breakpoint (960px - 1280px):\n  - fluid width, 6 spacing units (48px) of padding on left / right of container\n- `lg` breakpoint (1280px - 1920px):\n  - fixed container width of 1280px\n  - fluid width, 6 spacing units (48px) of padding on left / right of container\n- `xl` breakpoint (> 1920px):\n  - fixed container width of 1440px\n  - fluid width, 6 spacing units (48px) of padding on left / right of container\n\nThe container component is based off of the [Material UI box](https://material-ui.com/components/box/) component, so all [box props](https://material-ui.com/components/box/#api) and [style props](https://material-ui.com/system/basics/#all-inclusive) are available.",
  "methods": [],
  "displayName": "Container",
  "props": {
    "classes": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Object with class name overrides (valid keys: `root`)"
    }
  }
};
var exportComponent = (0, _core.withStyles)(styles, {
  name: "HypContainer"
})(Container); // copy static props for storybook

if (process.env.NODE_ENV !== "production") {
  exportComponent.displayName = Container.displayName;
  exportComponent.propTypes = Container.propTypes;
  exportComponent.defaultProps = Container.defaultProps;
}

var _default = exportComponent;
exports["default"] = _default;