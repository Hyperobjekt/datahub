"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Stack = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@material-ui/core");

var _clsx2 = _interopRequireDefault(require("clsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var styles = function styles(theme) {
  return {
    vertical: {},
    horizontal: {},
    aroundSm: {
      padding: theme.spacing(1)
    },
    aroundMd: {
      padding: theme.spacing(2)
    },
    aroundLg: {
      padding: theme.spacing(3)
    },
    aroundXl: {
      padding: theme.spacing(4)
    },
    betweenSm: {
      "&$horizontal > * + *": {
        marginLeft: theme.spacing(1)
      },
      "&$vertical > * + *": {
        marginTop: theme.spacing(1)
      }
    },
    betweenMd: {
      "&$horizontal > * + *": {
        marginLeft: theme.spacing(2)
      },
      "&$vertical > * + *": {
        marginTop: theme.spacing(2)
      }
    },
    betweenLg: {
      "&$horizontal > * + *": {
        marginLeft: theme.spacing(3)
      },
      "&$vertical > * + *": {
        marginTop: theme.spacing(3)
      }
    },
    betweenXl: {
      "&$horizontal > * + *": {
        marginLeft: theme.spacing(4)
      },
      "&$vertical > * + *": {
        marginTop: theme.spacing(4)
      }
    }
  };
};
/**
 * Stack is used to layout content horizontally or vertically
 * with a set amount of spacing around and between children
 *
 */


var Stack = function Stack(_ref) {
  var _clsx;

  var direction = _ref.direction,
      around = _ref.around,
      between = _ref.between,
      wrap = _ref.wrap,
      classes = _ref.classes,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, ["direction", "around", "between", "wrap", "classes", "className"]);

  // set vertical / horizontal default layout props
  var LayoutProps = direction === "vertical" ? {
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "flex-start",
    flexWrap: wrap ? "wrap" : "nowrap"
  } : {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    flexWrap: wrap ? "wrap" : "nowrap"
  };
  return /*#__PURE__*/_react["default"].createElement(_core.Box, _extends({
    className: (0, _clsx2["default"])("HypStack-root", (_clsx = {}, _defineProperty(_clsx, classes.vertical, direction === "vertical"), _defineProperty(_clsx, classes.horizontal, direction === "horizontal"), _defineProperty(_clsx, classes.betweenSm, between === "sm"), _defineProperty(_clsx, classes.betweenMd, between === "md"), _defineProperty(_clsx, classes.betweenLg, between === "lg"), _defineProperty(_clsx, classes.betweenXl, between === "xl"), _defineProperty(_clsx, classes.aroundSm, around === "sm"), _defineProperty(_clsx, classes.aroundMd, around === "md"), _defineProperty(_clsx, classes.aroundLg, around === "lg"), _defineProperty(_clsx, classes.aroundXl, around === "xl"), _clsx), className),
    display: "flex"
  }, LayoutProps, props));
};

exports.Stack = Stack;
Stack.defaultProps = {
  classes: {},
  direction: "horizontal",
  between: "sm",
  around: "none",
  wrap: true
};
Stack.propTypes = {
  /** object containing class names */
  classes: _propTypes["default"].object,

  /** class name for root */
  className: _propTypes["default"].string,

  /** true to wrap elements at container width */
  wrap: _propTypes["default"].bool,

  /** which direction to stack elements (vertical or horizontal) */
  direction: _propTypes["default"].oneOf(["vertical", "horizontal"]),

  /** determines how much space to put between children (none, sm, md, lg, xl) */
  between: _propTypes["default"].oneOf(["none", "sm", "md", "lg", "xl"]),

  /** determines how much padding to put on the container (none, sm, md, lg, xl) */
  around: _propTypes["default"].oneOf(["none", "sm", "md", "lg", "xl"])
};
Stack.__docgenInfo = {
  "description": "Stack is used to layout content horizontally or vertically\nwith a set amount of spacing around and between children",
  "methods": [],
  "displayName": "Stack",
  "props": {
    "classes": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "object containing class names"
    },
    "direction": {
      "defaultValue": {
        "value": "\"horizontal\"",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"vertical\"",
          "computed": false
        }, {
          "value": "\"horizontal\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "which direction to stack elements (vertical or horizontal)"
    },
    "between": {
      "defaultValue": {
        "value": "\"sm\"",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"none\"",
          "computed": false
        }, {
          "value": "\"sm\"",
          "computed": false
        }, {
          "value": "\"md\"",
          "computed": false
        }, {
          "value": "\"lg\"",
          "computed": false
        }, {
          "value": "\"xl\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "determines how much space to put between children (none, sm, md, lg, xl)"
    },
    "around": {
      "defaultValue": {
        "value": "\"none\"",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"none\"",
          "computed": false
        }, {
          "value": "\"sm\"",
          "computed": false
        }, {
          "value": "\"md\"",
          "computed": false
        }, {
          "value": "\"lg\"",
          "computed": false
        }, {
          "value": "\"xl\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "determines how much padding to put on the container (none, sm, md, lg, xl)"
    },
    "wrap": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "true to wrap elements at container width"
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "class name for root"
    }
  }
};
var exportComponent = (0, _core.withStyles)(styles, {
  name: "HypStack"
})(Stack); // copy static props for storybook

if (process.env.NODE_ENV !== "production") {
  exportComponent.displayName = Stack.displayName;
  exportComponent.propTypes = Stack.propTypes;
  exportComponent.defaultProps = Stack.defaultProps;
}

var _default = exportComponent;
exports["default"] = _default;