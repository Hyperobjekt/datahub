"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Header = exports.styles = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@material-ui/core");

var _useScrollPosition = require("@n8tb1t/use-scroll-position");

var _clsx2 = _interopRequireDefault(require("clsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      transition: theme.transitions.create(["height"])
    },

    /* Styles applied to the toolbar component. */
    toolbar: {
      flex: 1,
      padding: 0
    },

    /* Styles applied when the header is "sticky" after scrolling */
    stuck: {},

    /* Styles applied when the header is shrunk */
    shrunk: {},

    /* Styles for fixed header offset */
    offset: {}
  };
};
/**
 * The Header component is used or adding a header to a page.  Typically it has Branding and Navigation components added to it.  This component provides functionality for:
 *
 * - making the header sticky, either always or after scrolling a certain amount
 * - shrinking the header on scroll
 * - applying different styles to the header once it is "stuck" or "shrunk"
 */


exports.styles = styles;

var Header = function Header(_ref) {
  var _clsx;

  var classes = _ref.classes,
      children = _ref.children,
      height = _ref.height,
      sticky = _ref.sticky,
      shrink = _ref.shrink,
      shrinkOffset = _ref.shrinkOffset,
      stickyOffset = _ref.stickyOffset,
      ToolbarProps = _ref.ToolbarProps,
      props = _objectWithoutProperties(_ref, ["classes", "children", "height", "sticky", "shrink", "shrinkOffset", "stickyOffset", "ToolbarProps"]);

  // state indicating whether header is condensed
  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      shrunk = _useState2[0],
      setShrunk = _useState2[1]; // state indicating if the header is "stuck"


  var _useState3 = (0, _react.useState)(sticky && !stickyOffset),
      _useState4 = _slicedToArray(_useState3, 2),
      stuck = _useState4[0],
      setStuck = _useState4[1];

  var isShrinky = Boolean(shrink);
  var headerHeight = shrunk ? shrink : height;
  (0, _useScrollPosition.useScrollPosition)(function (_ref2) {
    var prevPos = _ref2.prevPos,
        currPos = _ref2.currPos;

    // only shrink header if proper settings are defined
    if (isShrinky && (shrinkOffset || shrinkOffset === 0)) {
      // check if conditions are met and shrink header
      currPos.y >= -shrinkOffset && shrunk && setShrunk(false);
      currPos.y < -shrinkOffset && !shrunk && setShrunk(true);
    } // only sticky header if proper settings are defined


    if (sticky) {
      var outOfZone = stickyOffset > 0 && currPos.y >= -stickyOffset; // check if conditions are met and shrink header

      outOfZone && stuck && setStuck(false);
      !outOfZone && !stuck && setStuck(true);
    }
  });
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_core.AppBar, _extends({
    className: (0, _clsx2["default"])("HypHeader-root", classes.root, (_clsx = {
      "HypHeader-shrunk": shrunk
    }, _defineProperty(_clsx, classes.shrunk, shrunk), _defineProperty(_clsx, "HypHeader-stuck", stuck), _defineProperty(_clsx, classes.stuck, stuck), _clsx)),
    position: stuck ? "fixed" : "static",
    style: {
      height: headerHeight
    }
  }, props), /*#__PURE__*/_react["default"].createElement(_core.Toolbar, _extends({
    disableGutters: true,
    className: (0, _clsx2["default"])("HypHeader-toolbar", classes.toolbar)
  }, ToolbarProps), children)), stuck && /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx2["default"])("HypHeader-offset", classes.offset),
    style: {
      minHeight: height
    }
  }));
};

exports.Header = Header;
Header.defaultProps = {
  height: 64,
  sticky: false,
  shrink: 0,
  stickyOffset: false,
  shrinkOffset: 0,
  classes: {},
  ToolbarProps: {}
};
Header.propTypes = {
  /**
   * Override classNames used within the component (valid keys: `root`, `toolbar`, `stuck`, `shrunk`, `offset`)
   */
  classes: _propTypes["default"].object.isRequired,

  /** Height for the header (in px) */
  height: _propTypes["default"].number,

  /** Boolean indicating if header should stick to top of window */
  sticky: _propTypes["default"].bool,

  /** Size header should shrink to on scroll */
  shrink: _propTypes["default"].number,

  /** Scroll offset before making header sticky */
  stickyOffset: _propTypes["default"].number,

  /** Scroll offset before making header shrink */
  shrinkOffset: _propTypes["default"].number,

  /** Props passed to the Material UI Toolbar */
  ToolbarProps: _propTypes["default"].object
};
Header.__docgenInfo = {
  "description": "The Header component is used or adding a header to a page.  Typically it has Branding and Navigation components added to it.  This component provides functionality for:\n\n- making the header sticky, either always or after scrolling a certain amount\n- shrinking the header on scroll\n- applying different styles to the header once it is \"stuck\" or \"shrunk\"",
  "methods": [],
  "displayName": "Header",
  "props": {
    "height": {
      "defaultValue": {
        "value": "64",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Height for the header (in px)"
    },
    "sticky": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Boolean indicating if header should stick to top of window"
    },
    "shrink": {
      "defaultValue": {
        "value": "0",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Size header should shrink to on scroll"
    },
    "stickyOffset": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Scroll offset before making header sticky"
    },
    "shrinkOffset": {
      "defaultValue": {
        "value": "0",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Scroll offset before making header shrink"
    },
    "classes": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Override classNames used within the component (valid keys: `root`, `toolbar`, `stuck`, `shrunk`, `offset`)"
    },
    "ToolbarProps": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Props passed to the Material UI Toolbar"
    }
  }
};
var exportComponent = (0, _core.withStyles)(styles, {
  name: "HypHeader"
})(Header); // copy static props for storybook

if (process.env.NODE_ENV !== "production") {
  exportComponent.displayName = Header.displayName;
  exportComponent.propTypes = Header.propTypes;
  exportComponent.defaultProps = Header.defaultProps;
}

var _default = exportComponent;
exports["default"] = _default;